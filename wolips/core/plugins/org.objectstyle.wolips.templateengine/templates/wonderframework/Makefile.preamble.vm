###############################################################################
#  Apple Makefile.preamble
#  Copyright 2001, Apple Computer, Inc.
#
#  Use this makefile for configuring the standard framework makefiles 
#  associated with ProjectBuilderWO.  It is included before the main makefile.
#  In Makefile.preamble you set attributes for a project, so they are available
#  to the project's makefiles.
#
#  In contrast, you typically write additional rules or override built-in 
#  behavior in the Makefile.postamble.  You should not put additional rules
#  in the preamble.
#  
#  Each directory in a project tree (main project plus subprojects) should 
#  have its own Makefile.preamble and Makefile.postamble.
#
###############################################################################
#
# Variable controlling characteristics of the make build system: 
#
#     MAKEFILEDIR: Directory in which to find $(MAKEFILE)
#     MAKEFILE: Top level mechanism Makefile (e.g., app.make, bundle.make)
#
#     OTHER_RECURSIVE_VARIABLES: The names of variables which you want to be
#         passed on the command line to recursive invocations of make.  Note that
# 	      the values in OTHER_*FLAGS are inherited by subprojects automatically --
#	      you do not have to (and shouldn't) add OTHER_*FLAGS to 
#	      OTHER_RECURSIVE_VARIABLES. 
#

#
# These variables provide hooks enabling you to add behavior at almost every 
# stage of the make:
#
#     BEFORE_PREBUILD: targets to build before installing headers for a subproject
#     AFTER_PREBUILD: targets to build after installing headers for a subproject
#     BEFORE_BUILD_RECURSION: targets to make before building subprojects
#     BEFORE_BUILD: targets to make before a build, but after subprojects
#     AFTER_BUILD: targets to make after a build
#
#     BEFORE_COPY_JAVA_CLASSES: targets to make prior to jar'ing the generated .class files
#     AFTER_COPY_JAVA_CLASSES: targets to make after jar'ing the generated .class files
#
#     BEFORE_INSTALL: targets to build before installing the product
#     AFTER_INSTALL: targets to build after installing the product
#     BEFORE_POSTINSTALL: targets to build before postinstalling every subproject
#     AFTER_POSTINSTALL: targts to build after postinstalling every subproject
#
#     BEFORE_INSTALLSRC: targets to build before installing source for a subproject
#     AFTER_INSTALLSRC: targets to build after installing source for a subproject
#

#
# Project dependency variables:
#     OTHER_PRODUCT_DEPENDS: Other dependencies of this project
#     OTHER_INITIAL_TARGETS: Built *before* building subprojects/bundles
#     OTHER_SOURCEFILES: Other source files maintained by .pre/postamble
#     OTHER_RESOURCES: Additional (non-localized) resources for this project, 
#         which can be generated
#     OTHER_GARBAGE: Additional files to be removed by `make clean' 
#

#
# Variables which control the file compilation:
#     OTHER_JAVATOOL_FLAGS: Pass flags to the 'javatool' compilation utility.
#         Flags which javatool doesn't recognize are passed down to the java compiler.
#     ARCHIVE_JAVA_CLASSES: Set to YES (the default) or NO.  Set it to NO to
#         turn off Java archiving (which is either jar, if available on your system, or zip).
#     JAVA_ARCHIVE_METHOD: Set to JAR to archive Java classes using Java archiving.  Set
#         to ZIP to archive them using zip compression.
#
#     JAVA_IS_SERVER_SIDE, JAVA_IS_CLIENT_SIDE: Set one, or both, of these flags to
#         NO to turn off building for client-side or server-side java.  Default is YES. 
#         Setting both to YES will build all files for both side (use this when building
#         java classes common to both client and server side)
JAVA_IS_SERVER_SIDE = YES
JAVA_IS_CLIENT_SIDE = NO
#
#     OTHER_CLASSPATH, OTHER_CLASSPATH_CLIENT: Use these to add additional Java classpaths for
#         the client and server sides (respectively) so generated classpath for Java in frameworks.
#         NOTE: Delimit your class path elements with $(CLASSPATH_DELIMITER) so they'll be
#         platform independent.
#     PREINDEX_FRAMEWORK: Set this to YES to suppress generation of a KeyValueCoding
#         index when installing frameworks (This index is used by WOB and IB to determine
#         keys available for an object).  Set to YES by default.
#

#
# Project-wide settings:
#     BUNDLE_PACKAGE_TYPE: The type of package being built.  Defaults to "APPL".
#     BUNDLE_SIGNATURE: The specific identifier of the built package.  Defaults to "webo".
#

#
# Set this to NO only if this framework and all of its subprojects have no
# .wo components.
HAS_WO_COMPONENTS = YES
#

#
# Variables used when installing the final product:
#     OTHER_INSTALL_DEPENDS: Targets to build before installation
#
#     INSTALL_AS_USER: owner of the intalled products (default is 'root')
#     INSTALL_AS_GROUP: group of the installed products (default is 'wheel')
#     INSTALL_PERMISSIONS: permissions of the installed product (default is 'o+rX')
#
#     INSTALLDIR_WEBSERVER: The installation Directory.  Typically, this value is
#         set to $(WEBSERVER_DOCROOT)/WebObjects/Frameworks (uncomment the line below
#         to use this default value).
#         Note: WEBSERVER_DOCROOT is computed from:
#             $(NEXT_ROOT)/$(SYSTEM_LIBRARY_DIR)/Frameworks/JavaWebObjects.framework/Resources/WebServerConfig.plist
#         which is created during installation.
#INSTALLDIR_WEBSERVER = $(WEBSERVER_DOCROOT)/WebObjects/Frameworks
#
#     DSTROOT: This variable's value is prefixed to the directory where a product
#         (application or framework) is installed. Developers wishing to install
#         their product into a location other than under $(NEXT_ROOT) should modify
#         the line below. An empty DSTROOT is legal; NEXT_ROOT defaults to "C:/Apple"
#         on Windows systems and "" on other systems.
DSTROOT = $(NEXT_ROOT)
#